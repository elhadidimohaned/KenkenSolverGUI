# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from kenken import generate_board
from kenken import solve
from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.QtCore import QSize, pyqtSlot
from PyQt5.uic import loadUi
from PyQt5.QtGui import QIcon
import random
import numpy as np

def random_sample(countnum, start, stop, step=1):
    def gen_random():
        while True:
            yield random.randrange(start, stop, step)

    def gen_n_unique(source, n):
        seen = set()
        seenadd = seen.add
        for i in (i for i in source() if i not in seen and not seenadd(i)):
            yield i
            if len(seen) == n:
                break

    return [i for i in gen_n_unique(gen_random,
                                    min(countnum, int(abs(stop - start) / abs(step))))]

class Ui_MainWindow(object):

    size = 0
    algo = ""
    ken = []
    ls = []
    ls2 = []
    ls3 = []
    colorindex = []

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1055, 732)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icon/download.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(840, 580, 151, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")

        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(650, 580, 151, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")

        self.radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton.setGeometry(QtCore.QRect(320, 560, 181, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton.setFont(font)
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_2.setGeometry(QtCore.QRect(320, 590, 271, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_3 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_3.setGeometry(QtCore.QRect(320, 620, 301, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_3.setFont(font)
        self.radioButton_3.setObjectName("radioButton_3")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(70, 520, 111, 16))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(80, 550, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.comboBox.setFont(font)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(60, 20, 911, 461))
        self.tableWidget.setObjectName("tableWidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(290, 510, 241, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label.setFont(font)
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1055, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Kenken Solver"))
        self.pushButton_3.setText(_translate("MainWindow", "Solve"))
        self.pushButton_4.setText(_translate("MainWindow", "Generate"))
        self.radioButton.setText(_translate("MainWindow", "BT"))
        self.radioButton_2.setText(_translate("MainWindow", "MAC"))
        self.radioButton_3.setText(_translate("MainWindow", "FC"))
        self.label_2.setText(_translate("MainWindow", "Enter size:"))
        self.comboBox.setItemText(0, _translate("MainWindow", "1*1"))
        self.comboBox.setItemText(1, _translate("MainWindow", "2*2"))
        self.comboBox.setItemText(2, _translate("MainWindow", "3*3"))
        self.comboBox.setItemText(3, _translate("MainWindow", "4*4"))
        self.comboBox.setItemText(4, _translate("MainWindow", "5*5"))
        self.comboBox.setItemText(5, _translate("MainWindow", "6*6"))
        self.comboBox.setItemText(6, _translate("MainWindow", "7*7"))
        self.comboBox.setItemText(7, _translate("MainWindow", "8*8"))
        self.comboBox.setItemText(8, _translate("MainWindow", "9*9"))
        self.label.setText(_translate("MainWindow", "Choose The Algorithm:"))
        self.comboBox.currentTextChanged.connect(self.on_combobox_changed)
        self.radioButton.clicked.connect(self.check)
        self.radioButton_2.clicked.connect(self.check_2)
        self.radioButton_3.clicked.connect(self.check_3)
        self.pushButton_3.clicked.connect(self.on_solve_click)
        self.pushButton_4.clicked.connect(self.generatepuzzle)

    def generatepuzzle(self):
        self.colorindex, op, self.ken = generate_board(self.size)
        colornum = len(self.colorindex)
        self.ls = random_sample(colornum, 20, 255)
        self.ls2 = random_sample(colornum, 20, 255)
        self.ls3 = random_sample(colornum, 20, 255)
        self.tableWidget.setRowCount(self.size)
        self.tableWidget.setColumnCount(self.size)
        self.tableWidget.setVisible(False)
        self.tableWidget.resizeColumnsToContents()
        self.tableWidget.setVisible(True)
        for i in range(self.size):
            for j in range(self.size):
                self.tableWidget.setItem(i, j, QTableWidgetItem(""))
        count = 0
        for items in self.colorindex:
            first = 1
            for item in items:
                j = item[0] - 1
                i = item[1] - 1
                if first:
                    self.tableWidget.setItem(i, j, QTableWidgetItem(op[count]))
                    first = 0
                center_item = self.tableWidget.item(i, j)
                center_item.setBackground(QtGui.QColor(self.ls[count], self.ls2[count], self.ls3[count]))
            count = count + 1

        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

    def check(self):
        if self.radioButton.isChecked():
            self.algo = "BT"

    def check_2(self):
        if self.radioButton_2.isChecked():
            self.algo = "MAC"

    def check_3(self):
        if self.radioButton_3.isChecked():
            self.algo = "FC"

    def on_combobox_changed(self, text):
        self.size = int(text[0])


    def on_solve_click(self,checked):
        output = solve(self.ken, self.algo)
        for i, items in enumerate(output):
            for j, item in enumerate(items):
                self.tableWidget.setItem(i, j, QTableWidgetItem(item))

        count = 0
        for items in self.colorindex:
            for item in items:
                j = item[0] - 1
                i = item[1] - 1
                center_item = self.tableWidget.item(i, j)
                center_item.setBackground(QtGui.QColor(self.ls[count], self.ls2[count], self.ls3[count]))
            count = count + 1


import Resources_rc

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())


